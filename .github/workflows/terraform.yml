# .github/workflows/terraform.yml
name: Vault-backed Snowflake Credentials

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      vault_addr:
        description: 'Vault server URL'
        type: string
        required: true
        default: 'https://vault.example.com:8200'
      vault_auth_role:
        description: 'Vault JWT auth role name'
        type: string
        required: true
        default: 'gha-role'
      vault_auth_path:
        description: 'Vault JWT auth mount path'
        type: string
        required: true
        default: 'jwt'
      vault_namespace:
        description: 'Vault namespace (HCP or Enterprise)'
        type: string
        required: false
        default: 'admin'
      vault_secret_path:
        description: 'Path to Snowflake credentials in Vault (e.g., database/creds/snowflake-role)'
        type: string
        required: true
        default: 'database/creds/snowflake-role'
      snowflake_organization_name:
        description: 'Snowflake organization identifier'
        type: string
        required: true
      snowflake_account_name:
        description: 'Snowflake account name/locator'
        type: string
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_INPUT: false
  TF_CLI_ARGS_init: -no-color
  TF_CLI_ARGS_plan: -no-color
  TF_CLI_ARGS_apply: -no-color
  TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

jobs:
  plan:
    name: Speculative Plan
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Snowflake credentials from Vault
        id: get-creds
        uses: hashicorp/vault-action@v3.4.0
        with:
          method: jwt
          url: ${{ inputs.vault_addr }}
          role: ${{ inputs.vault_auth_role }}
          path: ${{ inputs.vault_auth_path }}
          namespace: ${{ inputs.vault_namespace }}
          exportEnv: false
          secrets: |
            ${{ inputs.vault_secret_path }} username | SNOWFLAKE_USERNAME ;
            ${{ inputs.vault_secret_path }} rsa_private_key | SNOWFLAKE_RSA_PRIVATE_KEY ;

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        env:
          SNOWFLAKE_USER: ${{ steps.get-creds.outputs.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PRIVATE_KEY: ${{ steps.get-creds.outputs.SNOWFLAKE_RSA_PRIVATE_KEY }}
        run: terraform init

      - name: Terraform fmt check
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: |
          terraform plan \
            -var="organization_name=${{ inputs.snowflake_organization_name }}" \
            -var="account_name=${{ inputs.snowflake_account_name }}" \
            -input=false \
            -out=tfplan

      - name: Capture Plan Output
        if: github.event_name == 'pull_request'
        run: |
          # Capture the output from the already-created saved plan (tfplan)
          if [ -f tfplan ]; then
            PLAN_OUTPUT=$(terraform show -no-color tfplan)
          else
            # Fallback: try to show the most recent plan output
            PLAN_OUTPUT=$(terraform show -no-color)
          fi
          echo "plan_output<<EOF" >> $GITHUB_ENV
          echo "$PLAN_OUTPUT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment Plan on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Terraform plan output:
            ```hcl
            ${{ env.plan_output }}
            ```
          comment_tag: terraform-plan

  apply:
    name: Apply
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      # Protect this environment in repo settings to require approvals
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Snowflake credentials from Vault
        id: get-creds
        uses: hashicorp/vault-action@v3.4.0
        with:
          method: jwt
          url: ${{ inputs.vault_addr }}
          role: ${{ inputs.vault_auth_role }}
          path: ${{ inputs.vault_auth_path }}
          namespace: ${{ inputs.vault_namespace }}
          exportEnv: false
          secrets: |
            ${{ inputs.vault_secret_path }} username | SNOWFLAKE_USERNAME ;
            ${{ inputs.vault_secret_path }} rsa_private_key | SNOWFLAKE_RSA_PRIVATE_KEY ;

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        env:
          SNOWFLAKE_USER: ${{ steps.get-creds.outputs.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PRIVATE_KEY: ${{ steps.get-creds.outputs.SNOWFLAKE_RSA_PRIVATE_KEY }}
        run: terraform init

      # Apply changes directly (no prior saved plan)
      - name: Terraform apply
        run: |
          terraform apply -auto-approve \
            -var="organization_name=${{ inputs.snowflake_organization_name }}" \
            -var="account_name=${{ inputs.snowflake_account_name }}" \
            -input=false
