# .github/workflows/terraform.yml
name: Vault-backed Snowflake Credentials

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      vault_addr:
        description: 'Vault server URL'
        type: string
        required: true
        default: 'https://vault.example.com:8200'
      vault_role:
        description: 'Vault JWT auth role name'
        type: string
        required: true
        default: 'github-actions'
      vault_namespace:
        description: 'Vault namespace (HCP or Enterprise)'
        type: string
        required: false
        default: 'admin'
      vault_secret_path:
        description: 'Path to Snowflake credentials in Vault (e.g., database/creds/snowflake-role)'
        type: string
        required: true
        default: 'database/creds/snowflake-role'
      organization_name:
        description: 'Snowflake organization identifier'
        type: string
        required: true
        default: 'cibyvpq'
      account_name:
        description: 'Snowflake account name/locator'
        type: string
        required: true
        default: 'qkb30038'

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_INPUT: false
  TF_CLI_ARGS_init: -no-color
  TF_CLI_ARGS_plan: -no-color
  TF_CLI_ARGS_apply: -no-color
  # Uncomment if you use Terraform Cloud and add TF_API_TOKEN in repo secrets
  # TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}

jobs:
  snowflake-dynamic-creds:
    runs-on: ubuntu-latest
    outputs:
      snowflake_user: ${{ steps.vault-auth.outputs.username }}
      snowflake_private_key: ${{ steps.vault-auth.outputs.private_key }}
    steps:
      - name: Get Snowflake credentials from Vault
        id: vault-auth
        uses: hashicorp/vault-action@v2
        with:
          method: jwt
          url: ${{ inputs.vault_addr }}
          role: ${{ inputs.vault_role }}
          namespace: ${{ inputs.vault_namespace }}
          secrets: |
            ${{ inputs.vault_secret_path }} username | username
            ${{ inputs.vault_secret_path }} private_key | private_key

  plan:
    name: Plan
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    needs: snowflake-dynamic-creds
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_USER: ${{ needs.snowflake-dynamic-creds.outputs.snowflake_user }}
      SNOWFLAKE_PRIVATE_KEY: ${{ needs.snowflake-dynamic-creds.outputs.snowflake_private_key }}
    defaults:
      run:
        shell: bash
        working-directory: snowflake
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init

      - name: Terraform fmt check
        run: terraform fmt -check

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: |
          terraform plan \
            -var="organization_name=${{ inputs.organization_name }}" \
            -var="account_name=${{ inputs.account_name }}" \
            -out=tfplan.binary

      - name: Show plan as text
        run: terraform show -no-color tfplan.binary > tfplan.txt

      - name: Upload plan artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            tfplan.binary
            tfplan.txt

      - name: Comment plan summary on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Terraform plan completed. See attached artifact `tfplan.txt` for details.
          comment_tag: terraform-plan

  apply:
    name: Apply
    needs: [plan, snowflake-dynamic-creds]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment:
      name: production
      # Protect this environment in repo settings to require approvals
    defaults:
      run:
        shell: bash
        working-directory: snowflake
    env:
      SNOWFLAKE_USER: ${{ needs.snowflake-dynamic-creds.outputs.snowflake_user }}
      SNOWFLAKE_PRIVATE_KEY: ${{ needs.snowflake-dynamic-creds.outputs.snowflake_private_key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init

      # Simple apply. For a two step apply using the exact saved plan, download the artifact and run `terraform apply tfplan.binary`.
      - name: Terraform plan
        run: |
          terraform plan \
            -var="organization_name=${{ inputs.organization_name }}" \
            -var="account_name=${{ inputs.account_name }}" \
            -out=tfplan.binary

      - name: Terraform apply
        run: terraform apply -auto-approve tfplan.binary
